GNU gdb (GDB) 7.6.1
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64--netbsd".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /usr/src/sbin/ifconfig/ifconfig...done.
Breakpoint 1 at 0x409fad: file ifconfig.c, line 545.

Breakpoint 1, main (argc=3, argv=0x7f7fffffdc38) at ifconfig.c:545
545		bool aflag = false, Cflag = false;
549		int ch, narg = 0, rc;
553		memset(match, 0, sizeof(match));
555		init_afs();
init_afs () at ifconfig.c:719
719		struct kwinst kw = {.k_type = KW_T_INT};
721		SIMPLEQ_FOREACH(afp, &aflist, af_next) {
722			kw.k_word = afp->af_name;
723			kw.k_int = afp->af_af;
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
726					familykw[i] = kw;
727					break;
721		SIMPLEQ_FOREACH(afp, &aflist, af_next) {
722			kw.k_word = afp->af_name;
723			kw.k_int = afp->af_af;
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
726					familykw[i] = kw;
727					break;
721		SIMPLEQ_FOREACH(afp, &aflist, af_next) {
722			kw.k_word = afp->af_name;
723			kw.k_int = afp->af_af;
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
726					familykw[i] = kw;
727					break;
721		SIMPLEQ_FOREACH(afp, &aflist, af_next) {
722			kw.k_word = afp->af_name;
723			kw.k_int = afp->af_af;
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
724			for (i = 0; i < __arraycount(familykw); i++) {
725				if (familykw[i].k_word == NULL) {
726					familykw[i] = kw;
727					break;
721		SIMPLEQ_FOREACH(afp, &aflist, af_next) {
731	}
main (argc=3, argv=0x7f7fffffdc38) at ifconfig.c:557
557		start = init_parser();
init_parser () at ifconfig.c:479
479		if (parser_init(&iface_opt_family_only.pif_parser) == -1)
parser_init (p=0x6199a0 <iface_opt_family_only>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6199a0 <iface_opt_family_only>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619880 <opt_family_only>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619880 <opt_family_only>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
797		else if (pbranch_setbranches(pb, pb->pb_brinit, pb->pb_nbrinit) == -1)
pbranch_setbranches (pb=0x619880 <opt_family_only>, brs=0x619860 <opt_family_only_brs>, nbr=2) at parse.c:764
764		while ((b = SIMPLEQ_FIRST(&pb->pb_branches)) != NULL) {
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
779		return 0;
786	}
pbranch_init (p=0x619880 <opt_family_only>) at parse.c:800
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619500 <no_cmds>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
993			return 0;
995	}
pbranch_init (p=0x619880 <opt_family_only>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619540 <family_only>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619540 <family_only>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619540 <family_only>, defexec=0x0, defkey=0x413f8a "af", kws=0x61a6e0 <familykw>, nkw=24, defnext=0x619500 <no_cmds>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619540 <family_only>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619500 <no_cmds>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619540 <family_only>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619500 <no_cmds>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619540 <family_only>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619500 <no_cmds>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619540 <family_only>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619500 <no_cmds>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619540 <family_only>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619540 <family_only>) at parse.c:995
995	}
pbranch_init (p=0x619880 <opt_family_only>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619880 <opt_family_only>) at parse.c:995
995	}
parser_default_init (p=0x6199a0 <iface_opt_family_only>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6199a0 <iface_opt_family_only>) at parse.c:995
995	}
init_parser () at ifconfig.c:481
481		if (parser_init(&iface_only.pif_parser) == -1)
parser_init (p=0x619da0 <iface_only>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619da0 <iface_only>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
845		return 0;
846	}
parser_init (p=0x619da0 <iface_only>) at parse.c:995
995	}
init_parser () at ifconfig.c:483
483		if (parser_init(&iface_start.pif_parser) == -1)
parser_init (p=0x619d60 <iface_start>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619d60 <iface_start>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619c40 <opt_clone>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619c40 <opt_clone>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
797		else if (pbranch_setbranches(pb, pb->pb_brinit, pb->pb_nbrinit) == -1)
pbranch_setbranches (pb=0x619c40 <opt_clone>, brs=0x619760 <opt_clone_brs>, nbr=2) at parse.c:764
764		while ((b = SIMPLEQ_FIRST(&pb->pb_branches)) != NULL) {
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
779		return 0;
786	}
pbranch_init (p=0x619c40 <opt_clone>) at parse.c:800
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b80 <cloning>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619b80 <cloning>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619b80 <cloning>, defexec=0x40aa36 <clone_command>, defkey=0x414066 "clonecmd", kws=0x413ea0 <clonekw>, nkw=2, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619b80 <cloning>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ca0 <opt_silent_family>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619ca0 <opt_silent_family>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
797		else if (pbranch_setbranches(pb, pb->pb_brinit, pb->pb_nbrinit) == -1)
pbranch_setbranches (pb=0x619ca0 <opt_silent_family>, brs=0x619780 <opt_silent_family_brs>, nbr=2) at parse.c:764
764		while ((b = SIMPLEQ_FIRST(&pb->pb_branches)) != NULL) {
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
779		return 0;
786	}
pbranch_init (p=0x619ca0 <opt_silent_family>) at parse.c:800
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619a40 <silent_family>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619a40 <silent_family>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619a40 <silent_family>, defexec=0x0, defkey=0x413f8a "af", kws=0x61a6e0 <familykw>, nkw=24, defnext=0x619940 <command_root>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619a40 <silent_family>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
797		else if (pbranch_setbranches(pb, pb->pb_brinit, pb->pb_nbrinit) == -1)
pbranch_setbranches (pb=0x619940 <command_root>, brs=0x6197c0 <command_root_brs>, nbr=8) at parse.c:764
764		while ((b = SIMPLEQ_FIRST(&pb->pb_branches)) != NULL) {
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
779		return 0;
786	}
pbranch_init (p=0x619940 <command_root>) at parse.c:800
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619b20 <ifflags>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619b20 <ifflags>, defexec=0x40ad93 <setifflags>, defkey=0x414057 "ifflag", kws=0x413020 <ifflagskw>, nkw=7, defnext=0x619940 <command_root>)
    at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619b20 <ifflags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619b20 <ifflags>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619ac0 <ifcaps>, defexec=0x40af82 <setifcaps>, defkey=0x414049 "ifcap", kws=0x413380 <ifcapskw>, nkw=17, defnext=0x619940 <command_root>)
    at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619ac0 <ifcaps>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619ac0 <ifcaps>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619f40 <kwmedia>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619f40 <kwmedia>, defexec=0x0, defkey=0x0, kws=0x414d80 <mediakw>, nkw=6, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619e20 <mediainst>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619e20 <mediainst>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619e20 <mediainst>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619e20 <mediainst>) at parse.c:995
995	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619e20 <mediainst>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f00 <media>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619f00 <media>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619f00 <media>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619f00 <media>) at parse.c:995
995	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ec0 <mediaopt>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619ec0 <mediaopt>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619ec0 <mediaopt>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619ec0 <mediaopt>) at parse.c:995
995	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619e80 <unmediaopt>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619e80 <unmediaopt>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619e80 <unmediaopt>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619e80 <unmediaopt>) at parse.c:995
995	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619de0 <mediamode>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619de0 <mediamode>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619de0 <mediamode>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619de0 <mediamode>) at parse.c:995
995	}
pkw_init (p=0x619f40 <kwmedia>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619f40 <kwmedia>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x619be0 <misc>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x619be0 <misc>, defexec=0x0, defkey=0x0, kws=0x413a60 <misckw>, nkw=11, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x619be0 <misc>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619460 <parse_broadcast>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619460 <parse_broadcast>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619460 <parse_broadcast>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619460 <parse_broadcast>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619280 <parse_metric>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619280 <parse_metric>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619280 <parse_metric>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619280 <parse_metric>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6192e0 <parse_mtu>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6192e0 <parse_mtu>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6192e0 <parse_mtu>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6192e0 <parse_mtu>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619400 <parse_netmask>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619400 <parse_netmask>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619400 <parse_netmask>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619400 <parse_netmask>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6193a0 <parse_preference>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6193a0 <parse_preference>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6193a0 <parse_preference>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6193a0 <parse_preference>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619340 <parse_prefixlen>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619340 <parse_prefixlen>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619340 <parse_prefixlen>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619340 <parse_prefixlen>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6196c0 <parse_linkstr>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6196c0 <parse_linkstr>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6196c0 <parse_linkstr>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6196c0 <parse_linkstr>) at parse.c:995
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619be0 <misc>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619be0 <misc>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6195a0 <address>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6195a0 <address>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6195a0 <address>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619600 <dstormask>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619600 <dstormask>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619600 <dstormask>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619660 <broadcast>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619660 <broadcast>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619660 <broadcast>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pkw_init (p=0x619a40 <silent_family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619a40 <silent_family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619a40 <silent_family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x619a40 <silent_family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619a40 <silent_family>) at parse.c:995
995	}
pbranch_init (p=0x619ca0 <opt_silent_family>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619ca0 <opt_silent_family>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619ca0 <opt_silent_family>) at parse.c:995
995	}
pkw_init (p=0x619b80 <cloning>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x619b80 <cloning>) at parse.c:995
995	}
pbranch_init (p=0x619c40 <opt_clone>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619d00 <opt_family>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619d00 <opt_family>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
797		else if (pbranch_setbranches(pb, pb->pb_brinit, pb->pb_nbrinit) == -1)
pbranch_setbranches (pb=0x619d00 <opt_family>, brs=0x6197a0 <opt_family_brs>, nbr=2) at parse.c:764
764		while ((b = SIMPLEQ_FIRST(&pb->pb_branches)) != NULL) {
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
779		return 0;
786	}
pbranch_init (p=0x619d00 <opt_family>) at parse.c:800
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6199e0 <family>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x6199e0 <family>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x6199e0 <family>, defexec=0x0, defkey=0x413f8a "af", kws=0x61a6e0 <familykw>, nkw=24, defnext=0x6198e0 <opt_command>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
857				continue;
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x6199e0 <family>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6198e0 <opt_command>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x6198e0 <opt_command>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
797		else if (pbranch_setbranches(pb, pb->pb_brinit, pb->pb_nbrinit) == -1)
pbranch_setbranches (pb=0x6198e0 <opt_command>, brs=0x619840 <opt_command_brs>, nbr=2) at parse.c:764
764		while ((b = SIMPLEQ_FIRST(&pb->pb_branches)) != NULL) {
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
770			if ((b = malloc(sizeof(*b))) == NULL)
772			*b = brs[i];
776			SIMPLEQ_INSERT_TAIL(&pb->pb_branches, b, b_next);
769		for (i = 0; i < nbr; i++) {
779		return 0;
786	}
pbranch_init (p=0x6198e0 <opt_command>) at parse.c:800
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619500 <no_cmds>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x6198e0 <opt_command>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x6198e0 <opt_command>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x6198e0 <opt_command>) at parse.c:995
995	}
pkw_init (p=0x6199e0 <family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6198e0 <opt_command>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x6199e0 <family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6198e0 <opt_command>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x6199e0 <family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6198e0 <opt_command>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x6199e0 <family>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x6199e0 <family>) at parse.c:995
995	}
pbranch_init (p=0x619d00 <opt_family>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6198e0 <opt_command>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619d00 <opt_family>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619d00 <opt_family>) at parse.c:995
995	}
pbranch_init (p=0x619c40 <opt_clone>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619c40 <opt_clone>) at parse.c:995
995	}
parser_default_init (p=0x619d60 <iface_start>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619d60 <iface_start>) at parse.c:995
995	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x61a2c0 <pfsync>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x61a2c0 <pfsync>, defexec=0x0, defkey=0x0, kws=0x415920 <pfsynckw>, nkw=5, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a1c0 <parse_maxupd>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x61a1c0 <parse_maxupd>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x61a1c0 <parse_maxupd>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x61a1c0 <parse_maxupd>) at parse.c:995
995	}
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a220 <pfsyncdev>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x61a220 <pfsyncdev>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x61a220 <pfsyncdev>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x61a220 <pfsyncdev>) at parse.c:995
995	}
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a260 <parse_sync_peer>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x61a260 <parse_sync_peer>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x61a260 <parse_sync_peer>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x61a260 <parse_sync_peer>) at parse.c:995
995	}
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x61a2c0 <pfsync>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x61a2c0 <pfsync>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x61a2c0 <pfsync>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x61a160 <vlan>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x61a160 <vlan>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x61a160 <vlan>, defexec=0x0, defkey=0x0, kws=0x415720 <vlankw>, nkw=3, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x61a160 <vlan>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a0c0 <vlantag>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x61a0c0 <vlantag>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x61a0c0 <vlantag>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x61a0c0 <vlantag>) at parse.c:995
995	}
pkw_init (p=0x61a160 <vlan>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a120 <vlanif>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x61a120 <vlanif>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x61a120 <vlanif>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x61a120 <vlanif>) at parse.c:995
995	}
pkw_init (p=0x61a160 <vlan>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x61a160 <vlan>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x61a160 <vlan>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x61a060 <tunnel>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x61a060 <tunnel>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x61a060 <tunnel>, defexec=0x0, defkey=0x0, kws=0x415420 <tunnelkw>, nkw=2, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x61a060 <tunnel>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x61a060 <tunnel>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a000 <tunsrc>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x61a000 <tunsrc>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619fa0 <tundst>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619fa0 <tundst>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619fa0 <tundst>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619fa0 <tundst>) at parse.c:995
995	}
parser_default_init (p=0x61a000 <tunsrc>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x61a000 <tunsrc>) at parse.c:995
995	}
pkw_init (p=0x61a060 <tunnel>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x61a060 <tunnel>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x61a060 <tunnel>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618f80 <ieee80211bool>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618f80 <ieee80211bool>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618f80 <ieee80211bool>, defexec=0x0, defkey=0x0, kws=0x4112e0 <ieee80211boolkw>, nkw=3, defnext=0x619940 <command_root>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618f80 <ieee80211bool>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f80 <ieee80211bool>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f80 <ieee80211bool>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f80 <ieee80211bool>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618f80 <ieee80211bool>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618f20 <kw80211>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618f20 <kw80211>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618f20 <kw80211>, defexec=0x0, defkey=0x0, kws=0x411500 <kw80211kw>, nkw=14, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6191e0 <parse_bssid>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6191e0 <parse_bssid>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6191e0 <parse_bssid>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6191e0 <parse_bssid>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618fe0 <parse_chan>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618fe0 <parse_chan>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618fe0 <parse_chan>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618fe0 <parse_chan>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6190a0 <parse_frag>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6190a0 <parse_frag>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6190a0 <parse_frag>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6190a0 <parse_frag>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618ec0 <lists>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618ec0 <lists>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618ec0 <lists>, defexec=0x0, defkey=0x411490 "list", kws=0x411420 <listskw>, nkw=1, defnext=0x619940 <command_root>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618ec0 <lists>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618ec0 <lists>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618ec0 <lists>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619100 <parse_ssid>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619100 <parse_ssid>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619100 <parse_ssid>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619100 <parse_ssid>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6191a0 <parse_nwkey>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6191a0 <parse_nwkey>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6191a0 <parse_nwkey>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6191a0 <parse_nwkey>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619040 <parse_rts>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619040 <parse_rts>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619040 <parse_rts>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619040 <parse_rts>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619100 <parse_ssid>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619140 <parse_powersavesleep>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x619140 <parse_powersavesleep>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x619140 <parse_powersavesleep>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x619140 <parse_powersavesleep>) at parse.c:995
995	}
pkw_init (p=0x618f20 <kw80211>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618f20 <kw80211>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618f20 <kw80211>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618e60 <agr>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e60 <agr>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618e60 <agr>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618e60 <agr>, defexec=0x0, defkey=0x4111a4 "agrcmd", kws=0x4110e0 <agrkw>, nkw=2, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618e60 <agr>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e20 <agrif>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618e20 <agrif>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618e20 <agrif>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618e20 <agrif>) at parse.c:995
995	}
pkw_init (p=0x618e60 <agr>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e20 <agrif>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618e60 <agr>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618e60 <agr>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618e60 <agr>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618cc0 <ia6flags>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618cc0 <ia6flags>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618cc0 <ia6flags>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618cc0 <ia6flags>, defexec=0x0, defkey=0x410ca9 "ia6flag", kws=0x410a40 <ia6flagskw>, nkw=3, defnext=0x619940 <command_root>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
862				k->k_nextparser = defnext;
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618cc0 <ia6flags>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618cc0 <ia6flags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618cc0 <ia6flags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618cc0 <ia6flags>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618cc0 <ia6flags>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e60 <agr>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618cc0 <ia6flags>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618d20 <inet6>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618d20 <inet6>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618d20 <inet6>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618d20 <inet6>, defexec=0x0, defkey=0x0, kws=0x410b80 <inet6kw>, nkw=3, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618d20 <inet6>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618c00 <parse_pltime>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618c00 <parse_pltime>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618c00 <parse_pltime>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618c00 <parse_pltime>) at parse.c:995
995	}
pkw_init (p=0x618d20 <inet6>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618c60 <parse_vltime>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618c60 <parse_vltime>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618c60 <parse_vltime>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618c60 <parse_vltime>) at parse.c:995
995	}
pkw_init (p=0x618d20 <inet6>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618d20 <inet6>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618d20 <inet6>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618cc0 <ia6flags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e60 <agr>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618d20 <inet6>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618ba0 <carp>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618ba0 <carp>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618ba0 <carp>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618ba0 <carp>, defexec=0x0, defkey=0x0, kws=0x4106c0 <carpkw>, nkw=7, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618ba0 <carp>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6189a0 <parse_advbase>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6189a0 <parse_advbase>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6189a0 <parse_advbase>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6189a0 <parse_advbase>) at parse.c:995
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618a00 <parse_advskew>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618a00 <parse_advskew>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618a00 <parse_advskew>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618a00 <parse_advskew>) at parse.c:995
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618a60 <carpdev>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618a60 <carpdev>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618a60 <carpdev>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618a60 <carpdev>) at parse.c:995
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618b00 <pass>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618b00 <pass>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618b00 <pass>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618b00 <pass>) at parse.c:995
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618aa0 <carpstate>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618aa0 <carpstate>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618aa0 <carpstate>, defexec=0x403b97 <setcarp_state>, defkey=0x410696 "carp_state", kws=0x618880 <carpstatekw>, nkw=3, 
    defnext=0x619940 <command_root>) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618aa0 <carpstate>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618aa0 <carpstate>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618aa0 <carpstate>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x618aa0 <carpstate>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618aa0 <carpstate>) at parse.c:995
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618b40 <parse_vhid>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618b40 <parse_vhid>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618b40 <parse_vhid>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618b40 <parse_vhid>) at parse.c:995
995	}
pkw_init (p=0x618ba0 <carp>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618ba0 <carp>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618d20 <inet6>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618cc0 <ia6flags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e60 <agr>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618ba0 <carp>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x6187c0 <link>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6187c0 <link>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x6187c0 <link>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x6187c0 <link>, defexec=0x0, defkey=0x0, kws=0x4105c0 <linkkw>, nkw=1, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x6187c0 <link>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pkw_init (p=0x6187c0 <link>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x6187c0 <link>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618ba0 <carp>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618d20 <inet6>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618cc0 <ia6flags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e60 <agr>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x6187c0 <link>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
487			pbranch_addbranch(&command_root, b->b_parser);
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618760 <atalk>) at parse.c:748
748		if ((b = malloc(sizeof(*b))) == NULL)
750		b->b_nextparser = p;
751		SIMPLEQ_INSERT_HEAD(&pb->pb_branches, b, b_next);
752		pb->pb_parser.p_initialized = false;
753		return parser_init(&pb->pb_parser);
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pbranch_init (p=0x619940 <command_root>) at parse.c:792
792		struct pbranch *pb = (struct pbranch *)p;
795		if (pb->pb_nbrinit == 0)
800		pb->pb_nbrinit = 0;
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618760 <atalk>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
pkw_init (p=0x618760 <atalk>) at parse.c:883
883		struct pkw *pk = (struct pkw *)p;
886		if (pk->pk_nkwinit == 0)
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
889		    pk->pk_kwinit, pk->pk_nkwinit, pk->pk_nextinit) == -1)
888		else if (pkw_setwords(pk, pk->pk_execinit, pk->pk_keyinit,
pkw_setwords (pk=0x618760 <atalk>, defexec=0x0, defkey=0x0, kws=0x410380 <atalkkw>, nkw=2, defnext=0x0) at parse.c:855
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
856			if (kws[i].k_word == NULL)
858			if ((k = malloc(sizeof(*k))) == NULL)
860			*k = kws[i];
861			if (k->k_nextparser == NULL)
863			if (k->k_key == NULL)
864				k->k_key = defkey;
865			if (k->k_exec == NULL)
866				k->k_exec = defexec;
867			SIMPLEQ_INSERT_TAIL(&pk->pk_keywords, k, k_next);
855		for (i = 0; i < nkw; i++) {
869		return 0;
877	}
pkw_init (p=0x618760 <atalk>) at parse.c:892
892		pk->pk_nkwinit = 0;
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6186c0 <phase>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x6186c0 <phase>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x6186c0 <phase>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x6186c0 <phase>) at parse.c:995
995	}
pkw_init (p=0x618760 <atalk>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
895			np = k->k_nextparser;
896			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618720 <parse_range>) at parse.c:989
989		if (p->p_initialized)
991		p->p_initialized = true;
992		if (p->p_methods->pm_init == NULL)
994		return (*p->p_methods->pm_init)(p);
parser_default_init (p=0x618720 <parse_range>) at parse.c:841
841		np = p->p_nextparser;
842		if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619940 <command_root>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
parser_default_init (p=0x618720 <parse_range>) at parse.c:845
845		return 0;
846	}
parser_init (p=0x618720 <parse_range>) at parse.c:995
995	}
pkw_init (p=0x618760 <atalk>) at parse.c:894
894		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
899		return 0;
900	}
parser_init (p=0x618760 <atalk>) at parse.c:995
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6187c0 <link>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618ba0 <carp>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618d20 <inet6>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618cc0 <ia6flags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618e60 <agr>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f20 <kw80211>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x618f80 <ieee80211bool>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a060 <tunnel>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a160 <vlan>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x61a2c0 <pfsync>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619b20 <ifflags>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619ac0 <ifcaps>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619f40 <kwmedia>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619be0 <misc>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x6195a0 <address>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619600 <dstormask>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
parser_init (p=0x619660 <broadcast>) at parse.c:989
989		if (p->p_initialized)
990			return 0;
995	}
pbranch_init (p=0x619940 <command_root>) at parse.c:802
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
803			np = b->b_nextparser;
804			if (np != NULL && parser_init(np) == -1)
802		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
807		return 0;
808	}
parser_init (p=0x619940 <command_root>) at parse.c:995
995	}
pbranch_addbranch (pb=0x619940 <command_root>, p=0x618760 <atalk>) at parse.c:754
754	}
init_parser () at ifconfig.c:486
486		SIMPLEQ_FOREACH(b, &cmdloop_branches, b_next)
489		return &iface_start.pif_parser;
490	}
main (argc=3, argv=0x7f7fffffdc38) at ifconfig.c:560
560		Nflag = vflag = zflag = false;
561		aflag = argc == 1 ? true : false;
562		if (aflag)
565		while ((ch = getopt(argc, argv, gflags)) != -1) {
643		argc -= optind;
644		argv += optind;
655		if ((lflag || Cflag) && (aflag || get_flag('m') || vflag || zflag))
657		if ((lflag || Cflag) && get_flag('L'))
659		if (lflag && Cflag)
662		nmatch = __arraycount(match);
664		rc = parse(argc, argv, start, match, &nmatch, &narg);
parse (argc=2, argv=0x7f7fffffdc40, p0=0x619d60 <iface_start>, matches=0x7f7fffffd6b0, nmatch=0x7f7fffffd6a8, narg=0x7f7fffffd6a4) at parse.c:930
930		int i, rc = 0;
931		struct match *lastm = NULL, *m = matches;
932		const struct parser *p = p0;
934		for (i = 0; i < argc && p != NULL; i++) {
935			if ((size_t)(m - matches) >= *nmatch) {
940			rc = (*p->p_methods->pm_match)(p, lastm, m, i, argv[i]);
piface_match (p=0x619d60 <iface_start>, im=0x0, om=0x7f7fffffd6b0, argidx=0, arg=0x7f7ffffffe3a "wm0") at parse.c:522
522		const struct piface *pif = (const struct piface *)p;
525		if (arg == NULL || strlen(arg) > IFNAMSIZ) {
530		if ((o = (prop_object_t)prop_string_create_cstring(arg)) == NULL) {
535		if (match_setenv(im, om, pif->pif_key, o) == -1)
match_setenv (im=0x0, om=0x7f7fffffd6b0, key=0x41402a "if", o=0x7f7ff7b07050) at parse.c:122
122		if (im == NULL)
123			om->m_env = prop_dictionary_create();
127		if (om->m_env == NULL)
130		if (key != NULL && !prop_dictionary_set(om->m_env, key, o))
133		if (o != NULL)
134			prop_object_release((prop_object_t)o);
136		return 0;
144	}
piface_match (p=0x619d60 <iface_start>, im=0x0, om=0x7f7fffffd6b0, argidx=0, arg=0x7f7ffffffe3a "wm0") at parse.c:538
538		om->m_argidx = argidx;
539		om->m_parser = p;
540		om->m_nextparser = p->p_nextparser;
541		return 0;
542	}
parse (argc=2, argv=0x7f7fffffdc40, p0=0x619d60 <iface_start>, matches=0x7f7fffffd6b0, nmatch=0x7f7fffffd6a8, narg=0x7f7fffffd6a4) at parse.c:941
941			if (rc != 0)
943			p = m->m_nextparser;
944			lastm = m++;
934		for (i = 0; i < argc && p != NULL; i++) {
935			if ((size_t)(m - matches) >= *nmatch) {
940			rc = (*p->p_methods->pm_match)(p, lastm, m, i, argv[i]);
pbranch_match (p=0x619c40 <opt_clone>, im=0x7f7fffffd6b0, om=0x7f7fffffd6d8, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:567
567		const struct pbranch *pb = (const struct pbranch *)p;
569		int nforbid = 0, nmatch = 0, rc;
572		memset(&tmpm, 0, sizeof(tmpm));
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619b80 <cloning>, im=0x7f7fffffd6b0, om=0x7f7fffffd5a0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619c40 <opt_clone>, im=0x7f7fffffd6b0, om=0x7f7fffffd6d8, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pbranch_match (p=0x619d00 <opt_family>, im=0x7f7fffffd6b0, om=0x7f7fffffd5a0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:567
567		const struct pbranch *pb = (const struct pbranch *)p;
569		int nforbid = 0, nmatch = 0, rc;
572		memset(&tmpm, 0, sizeof(tmpm));
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x6199e0 <family>, im=0x7f7fffffd6b0, om=0x7f7fffffd4f0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619d00 <opt_family>, im=0x7f7fffffd6b0, om=0x7f7fffffd5a0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pbranch_match (p=0x6198e0 <opt_command>, im=0x7f7fffffd6b0, om=0x7f7fffffd4f0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:567
567		const struct pbranch *pb = (const struct pbranch *)p;
569		int nforbid = 0, nmatch = 0, rc;
572		memset(&tmpm, 0, sizeof(tmpm));
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pterm_match (p=0x619500 <no_cmds>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:500
500		const struct pterm *pt = (const struct pterm *)p;
503		if (arg != NULL) {
504			errno = EINVAL;
505			return -1;
516	}
pbranch_match (p=0x6198e0 <opt_command>, im=0x7f7fffffd6b0, om=0x7f7fffffd4f0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:567
567		const struct pbranch *pb = (const struct pbranch *)p;
569		int nforbid = 0, nmatch = 0, rc;
572		memset(&tmpm, 0, sizeof(tmpm));
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618760 <atalk>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x6187c0 <link>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618ba0 <carp>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618d20 <inet6>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618cc0 <ia6flags>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618e60 <agr>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618f20 <kw80211>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618f80 <ieee80211bool>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x61a060 <tunnel>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x61a160 <vlan>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
636			    prop_dictionary_get(im->m_env, k->k_act) == NULL)
635			if (k->k_act != NULL &&
637				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x61a2c0 <pfsync>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619b20 <ifflags>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619ac0 <ifcaps>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619f40 <kwmedia>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
636			    prop_dictionary_get(im->m_env, k->k_act) == NULL)
635			if (k->k_act != NULL &&
637				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
636			    prop_dictionary_get(im->m_env, k->k_act) == NULL)
635			if (k->k_act != NULL &&
637				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619be0 <misc>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
636			    prop_dictionary_get(im->m_env, k->k_act) == NULL)
635			if (k->k_act != NULL &&
637				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
635			if (k->k_act != NULL &&
639			if (k->k_neg && arg[0] == '-' &&
642			else if (strcmp(k->k_word, arg) == 0)
645				continue;
634		SIMPLEQ_FOREACH(k, &pk->pk_keywords, k_next) {
656		if (k == NULL) {
657			errno = ENOENT;
658			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
paddr_match (p=0x6195a0 <address>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg0=0x7f7ffffffe3e "10.93.48.180") at parse.c:310
310		const struct paddr *pa = (const struct paddr *)p;
316		const struct sockaddr *sa = NULL;
317		struct addrinfo hints, *result = NULL;
318		char *arg, *end, *plen = NULL, *servname0;
320		long prefixlen = -1;
323		if (arg0 == NULL) {
328		if (pa->pa_activator != NULL &&
332		if (pa->pa_deactivator != NULL &&
333		    prop_dictionary_get(im->m_env, pa->pa_deactivator) != NULL)
332		if (pa->pa_deactivator != NULL &&
336		if (!prop_dictionary_get_int64(im->m_env, "af", &af0))
337			af = AF_UNSPEC;
341		memset(&u, 0, sizeof(u));
343		switch (af) {
347			if ((arg = strdup(arg0)) == NULL)
350			servname0 = arg;
351			(void)strsep(&servname0, ",");
352			servname = (servname0 == NULL) ? "0" : servname0;
354			if (pa->pa_maskkey == NULL)
356			else if ((plen = strrchr(arg, '/')) != NULL)
359			memset(&hints, 0, sizeof(hints));
361			hints.ai_flags = AI_NUMERICHOST | AI_PASSIVE;
362			hints.ai_family = af;
363			hints.ai_socktype = SOCK_DGRAM;
366				rc = getaddrinfo(arg, servname, &hints, &result);
367				if (rc == 0) {
368					if (result->ai_next == NULL)
369						sa = result->ai_addr;
372					break;
389			if (plen == NULL)
390				prefixlen = -1;
401			free(arg);
402			if (sa != NULL || af != AF_UNSPEC)
424		if (sa == NULL)
427		len = offsetof(struct paddr_prefix, pfx_addr) + sa->sa_len;
429		if ((pfx = malloc(len)) == NULL)
442		pfx->pfx_len = (int16_t)prefixlen;
443		memcpy(&pfx->pfx_addr, sa, sa->sa_len);
444		af = sa->sa_family;
446		if (result != NULL)
447			freeaddrinfo(result);
449		o = (prop_object_t)prop_data_create_data(pfx, len);
451		free(pfx);
453		if (o == NULL)
456		if (match_setenv(im, om, pa->pa_addrkey, o) == -1)
match_setenv (im=0x7f7fffffd6b0, om=0x7f7fffffd390, key=0x413a3b "address", o=0x7f7ff7b07080) at parse.c:122
122		if (im == NULL)
125			om->m_env = prop_dictionary_copy(im->m_env);
127		if (om->m_env == NULL)
130		if (key != NULL && !prop_dictionary_set(om->m_env, key, o))
133		if (o != NULL)
134			prop_object_release((prop_object_t)o);
136		return 0;
144	}
paddr_match (p=0x6195a0 <address>, im=0x7f7fffffd6b0, om=0x7f7fffffd390, argidx=1, arg0=0x7f7ffffffe3e "10.93.48.180") at parse.c:459
459		if (pa->pa_maskkey != NULL && plen != NULL) {
490		om->m_argidx = argidx;
491		om->m_parser = p;
492		om->m_nextparser = p->p_nextparser;
493		return 0;
494	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:590
590			if (rc == 0) {
591				match_copy(om, &tmpm);
match_copy (dst=0x7f7fffffd440, src=0x7f7fffffd390) at parse.c:555
555		match_cleanup(dst);
match_cleanup (dst=0x7f7fffffd440) at parse.c:547
547		if (dst->m_env != NULL)
549		memset(dst, 0, sizeof(*dst));
550	}
match_copy (dst=0x7f7fffffd440, src=0x7f7fffffd390) at parse.c:557
557		prop_object_retain((prop_object_t)src->m_env);
558		*dst = *src;
559	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:592
592				match_cleanup(&tmpm);
match_cleanup (dst=0x7f7fffffd390) at parse.c:547
547		if (dst->m_env != NULL)
548			prop_object_release((prop_object_t)dst->m_env);
549		memset(dst, 0, sizeof(*dst));
550	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6b0, om=0x7f7fffffd440, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:593
593				nmatch++;
595				if (pb->pb_match_first)
596					break;
606		switch (nmatch) {
612			return 0;
618	}
590			if (rc == 0) {
591				match_copy(om, &tmpm);
match_copy (dst=0x7f7fffffd4f0, src=0x7f7fffffd440) at parse.c:555
555		match_cleanup(dst);
match_cleanup (dst=0x7f7fffffd4f0) at parse.c:547
547		if (dst->m_env != NULL)
549		memset(dst, 0, sizeof(*dst));
550	}
match_copy (dst=0x7f7fffffd4f0, src=0x7f7fffffd440) at parse.c:557
557		prop_object_retain((prop_object_t)src->m_env);
558		*dst = *src;
559	}
pbranch_match (p=0x6198e0 <opt_command>, im=0x7f7fffffd6b0, om=0x7f7fffffd4f0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:592
592				match_cleanup(&tmpm);
match_cleanup (dst=0x7f7fffffd440) at parse.c:547
547		if (dst->m_env != NULL)
548			prop_object_release((prop_object_t)dst->m_env);
549		memset(dst, 0, sizeof(*dst));
550	}
pbranch_match (p=0x6198e0 <opt_command>, im=0x7f7fffffd6b0, om=0x7f7fffffd4f0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:593
593				nmatch++;
595				if (pb->pb_match_first)
596					break;
606		switch (nmatch) {
612			return 0;
618	}
590			if (rc == 0) {
591				match_copy(om, &tmpm);
match_copy (dst=0x7f7fffffd5a0, src=0x7f7fffffd4f0) at parse.c:555
555		match_cleanup(dst);
match_cleanup (dst=0x7f7fffffd5a0) at parse.c:547
547		if (dst->m_env != NULL)
549		memset(dst, 0, sizeof(*dst));
550	}
match_copy (dst=0x7f7fffffd5a0, src=0x7f7fffffd4f0) at parse.c:557
557		prop_object_retain((prop_object_t)src->m_env);
558		*dst = *src;
559	}
pbranch_match (p=0x619d00 <opt_family>, im=0x7f7fffffd6b0, om=0x7f7fffffd5a0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:592
592				match_cleanup(&tmpm);
match_cleanup (dst=0x7f7fffffd4f0) at parse.c:547
547		if (dst->m_env != NULL)
548			prop_object_release((prop_object_t)dst->m_env);
549		memset(dst, 0, sizeof(*dst));
550	}
pbranch_match (p=0x619d00 <opt_family>, im=0x7f7fffffd6b0, om=0x7f7fffffd5a0, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:593
593				nmatch++;
595				if (pb->pb_match_first)
596					break;
606		switch (nmatch) {
612			return 0;
618	}
590			if (rc == 0) {
591				match_copy(om, &tmpm);
match_copy (dst=0x7f7fffffd6d8, src=0x7f7fffffd5a0) at parse.c:555
555		match_cleanup(dst);
match_cleanup (dst=0x7f7fffffd6d8) at parse.c:547
547		if (dst->m_env != NULL)
549		memset(dst, 0, sizeof(*dst));
550	}
match_copy (dst=0x7f7fffffd6d8, src=0x7f7fffffd5a0) at parse.c:557
557		prop_object_retain((prop_object_t)src->m_env);
558		*dst = *src;
559	}
pbranch_match (p=0x619c40 <opt_clone>, im=0x7f7fffffd6b0, om=0x7f7fffffd6d8, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:592
592				match_cleanup(&tmpm);
match_cleanup (dst=0x7f7fffffd5a0) at parse.c:547
547		if (dst->m_env != NULL)
548			prop_object_release((prop_object_t)dst->m_env);
549		memset(dst, 0, sizeof(*dst));
550	}
pbranch_match (p=0x619c40 <opt_clone>, im=0x7f7fffffd6b0, om=0x7f7fffffd6d8, argidx=1, arg=0x7f7ffffffe3e "10.93.48.180") at parse.c:593
593				nmatch++;
595				if (pb->pb_match_first)
596					break;
606		switch (nmatch) {
612			return 0;
618	}
parse (argc=2, argv=0x7f7fffffdc40, p0=0x619d60 <iface_start>, matches=0x7f7fffffd6b0, nmatch=0x7f7fffffd6a8, narg=0x7f7fffffd6a4) at parse.c:941
941			if (rc != 0)
943			p = m->m_nextparser;
944			lastm = m++;
934		for (i = 0; i < argc && p != NULL; i++) {
946		for (; (size_t)(m - matches) < *nmatch && p != NULL; ) {
947			rc = (*p->p_methods->pm_match)(p, lastm, m, i, NULL);
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:567
567		const struct pbranch *pb = (const struct pbranch *)p;
569		int nforbid = 0, nmatch = 0, rc;
572		memset(&tmpm, 0, sizeof(tmpm));
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618760 <atalk>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x6187c0 <link>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618ba0 <carp>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618d20 <inet6>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618cc0 <ia6flags>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618e60 <agr>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618f20 <kw80211>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x618f80 <ieee80211bool>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x61a060 <tunnel>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x61a160 <vlan>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x61a2c0 <pfsync>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619b20 <ifflags>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619ac0 <ifcaps>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619f40 <kwmedia>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
pkw_match (p=0x619be0 <misc>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg=0x0) at parse.c:624
624		prop_object_t o = NULL;
626		union kwval *u = NULL;
627		const struct pkw *pk = (const struct pkw *)p;
629		if (arg == NULL) {
630			errno = EINVAL;
631			return -1;
702	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
paddr_match (p=0x6195a0 <address>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg0=0x0) at parse.c:310
310		const struct paddr *pa = (const struct paddr *)p;
316		const struct sockaddr *sa = NULL;
317		struct addrinfo hints, *result = NULL;
318		char *arg, *end, *plen = NULL, *servname0;
320		long prefixlen = -1;
323		if (arg0 == NULL) {
324			errno = EINVAL;
325			return -1;
494	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
paddr_match (p=0x619600 <dstormask>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg0=0x0) at parse.c:310
310		const struct paddr *pa = (const struct paddr *)p;
316		const struct sockaddr *sa = NULL;
317		struct addrinfo hints, *result = NULL;
318		char *arg, *end, *plen = NULL, *servname0;
320		long prefixlen = -1;
323		if (arg0 == NULL) {
324			errno = EINVAL;
325			return -1;
494	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
588			matchfunc = nextp->p_methods->pm_match;
589			rc = (*matchfunc)(nextp, im, &tmpm, argidx, arg);
paddr_match (p=0x619660 <broadcast>, im=0x7f7fffffd6d8, om=0x7f7fffffd5a0, argidx=2, arg0=0x0) at parse.c:310
310		const struct paddr *pa = (const struct paddr *)p;
316		const struct sockaddr *sa = NULL;
317		struct addrinfo hints, *result = NULL;
318		char *arg, *end, *plen = NULL, *servname0;
320		long prefixlen = -1;
323		if (arg0 == NULL) {
324			errno = EINVAL;
325			return -1;
494	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:590
590			if (rc == 0) {
597			} else if (rc == 1) {
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
575			nextp = b->b_nextparser;
578			if (nextp == NULL) {
579				if (arg == NULL) {
580					nmatch++;
581					match_setenv(im, om, NULL, NULL);
match_setenv (im=0x7f7fffffd6d8, om=0x7f7fffffd700, key=0x0, o=0x0) at parse.c:122
122		if (im == NULL)
125			om->m_env = prop_dictionary_copy(im->m_env);
127		if (om->m_env == NULL)
130		if (key != NULL && !prop_dictionary_set(om->m_env, key, o))
133		if (o != NULL)
136		return 0;
144	}
pbranch_match (p=0x619940 <command_root>, im=0x7f7fffffd6d8, om=0x7f7fffffd700, argidx=2, arg=0x0) at parse.c:582
582					om->m_nextparser = NULL;
583					om->m_parser = p;
584					om->m_argidx = argidx;
586				continue;
574		SIMPLEQ_FOREACH(b, &pb->pb_branches, b_next) {
606		switch (nmatch) {
612			return 0;
618	}
parse (argc=2, argv=0x7f7fffffdc40, p0=0x619d60 <iface_start>, matches=0x7f7fffffd6b0, nmatch=0x7f7fffffd6a8, narg=0x7f7fffffd6a4) at parse.c:948
948			if (rc != 0)
950			p = m->m_nextparser;
951			lastm = m++;
954		*nmatch = m - matches;
955		*narg = i;
956		return rc;
957	}
main (argc=2, argv=0x7f7fffffdc40) at ifconfig.c:665
665		if (rc != 0)
668		if (prog_init && prog_init() == -1)
671		if ((oenv = prop_dictionary_create()) == NULL)
674		if (matches_exec(match, oenv, nmatch) == -1)
matches_exec (matches=0x7f7fffffd6b0, oenv=0x7f7ff7b0a1d0, nmatch=3) at parse.c:963
963		int rc = 0;
968		for (i = 0; i < nmatch; i++) {
969			m = &matches[i];
971			pexec = (m->m_parser->p_exec != NULL)
972			    ? m->m_parser->p_exec : m->m_exec;
971			pexec = (m->m_parser->p_exec != NULL)
973			if (pexec == NULL)
974				continue;
968		for (i = 0; i < nmatch; i++) {
969			m = &matches[i];
971			pexec = (m->m_parser->p_exec != NULL)
972			    ? m->m_parser->p_exec : m->m_exec;
971			pexec = (m->m_parser->p_exec != NULL)
973			if (pexec == NULL)
977			d = prop_dictionary_augment(m->m_env, oenv);
prop_dictionary_augment (bottom=0x7f7ff7b0a0f0, top=0x7f7ff7b0a1d0) at env.c:55
55		d = prop_dictionary_copy_mutable(bottom);
56		if (d == NULL)
59		i = prop_dictionary_iterator(top);
61		while (i != NULL && (ko = prop_object_iterator_next(i)) != NULL) {
71		if (i != NULL)
72			prop_object_iterator_release(i);
73		if (d != NULL)
74			prop_dictionary_make_immutable(d);
75		return d;
76	}
matches_exec (matches=0x7f7fffffd6b0, oenv=0x7f7ff7b0a1d0, nmatch=3) at parse.c:978
978			rc = (*pexec)(d, oenv);
setifaddr (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0) at ifconfig.c:884
884		if ((af = getaf(env)) == -1)
getaf (env=0x7f7ff7b0a240) at env.c:175
175		if (!prop_dictionary_get_int64(env, "af", &af)) {
176			errno = ENOENT;
177			return -1;
180	}
setifaddr (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0) at ifconfig.c:885
885			af = AF_INET;
887		d = (prop_data_t)prop_dictionary_get(env, "address");
888		assert(d != NULL);
889		pfx0 = prop_data_data_nocopy(d);
891		if (pfx0->pfx_len >= 0) {
898		return 0;
899	}
matches_exec (matches=0x7f7fffffd6b0, oenv=0x7f7ff7b0a1d0, nmatch=3) at parse.c:979
979			prop_object_release((prop_object_t)d);
980			if (rc == -1)
968		for (i = 0; i < nmatch; i++) {
969			m = &matches[i];
971			pexec = (m->m_parser->p_exec != NULL)
972			    ? m->m_parser->p_exec : m->m_exec;
971			pexec = (m->m_parser->p_exec != NULL)
973			if (pexec == NULL)
974				continue;
968		for (i = 0; i < nmatch; i++) {
983		return rc;
984	}
main (argc=2, argv=0x7f7fffffdc40) at ifconfig.c:677
677		argc -= narg;
678		argv += narg;
680		env = (nmatch > 0) ? match[(int)nmatch - 1].m_env : NULL;
681		if (env == NULL)
684			env = prop_dictionary_augment(env, oenv);
prop_dictionary_augment (bottom=0x7f7ff7b0a160, top=0x7f7ff7b0a1d0) at env.c:55
55		d = prop_dictionary_copy_mutable(bottom);
56		if (d == NULL)
59		i = prop_dictionary_iterator(top);
61		while (i != NULL && (ko = prop_object_iterator_next(i)) != NULL) {
71		if (i != NULL)
72			prop_object_iterator_release(i);
73		if (d != NULL)
74			prop_dictionary_make_immutable(d);
75		return d;
76	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:685
685			if (env == NULL)
691		process_media_commands(env);
process_media_commands (env=0x7f7ff7b0a240) at media.c:145
145		if (prop_dictionary_get(env, "media") == NULL &&
146		    prop_dictionary_get(env, "mediaopt") == NULL &&
145		if (prop_dictionary_get(env, "media") == NULL &&
147		    prop_dictionary_get(env, "unmediaopt") == NULL &&
146		    prop_dictionary_get(env, "mediaopt") == NULL &&
148		    prop_dictionary_get(env, "mediamode") == NULL) {
147		    prop_dictionary_get(env, "unmediaopt") == NULL &&
150			return;
165	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:693
693		if ((af = getaf(env)) == -1)
getaf (env=0x7f7ff7b0a240) at env.c:175
175		if (!prop_dictionary_get_int64(env, "af", &af)) {
176			errno = ENOENT;
177			return -1;
180	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:694
694			af = AF_INET;
696		if ((s = getsock(af)) == -1)
getsock (naf=2) at util.c:64
64		if (oaf == naf || (oaf != -1 && naf == AF_UNSPEC))
67		if (oaf != -1)
70		if (naf == AF_UNSPEC)
73		s = prog_socket(naf, SOCK_DGRAM, 0);
74		if (s == -1)
77			oaf = naf;
78		return s;
79	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:699
699		if ((ifname = getifname(env)) == NULL)
getifname (env=0x7f7ff7b0a240) at env.c:125
125		return prop_dictionary_get_cstring_nocopy(env, "if", &s) ? s : NULL;
126	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:702
702		if ((afp = lookup_af_bynum(af)) == NULL)
lookup_af_bynum (afnum=2) at ifconfig.c:738
738		SIMPLEQ_FOREACH(afp, &aflist, af_next) {
739			if (afp->af_af == afnum)
740				break;
742		return afp;
743	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:705
705		assert(afp->af_addr_commit != NULL);
706		(*afp->af_addr_commit)(env, oenv);
in_commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0) at af_inet.c:182
182		struct afparam inparam = {
201		memset(&in_ifr, 0, sizeof(in_ifr));
202		memset(&in_ifra, 0, sizeof(in_ifra));
203		commit_address(env, oenv, &inparam);
commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, param=0x7f7fffffd4b0) at af_inetany.c:77
77		if ((af = getaf(env)) == -1)
getaf (env=0x7f7ff7b0a240) at env.c:175
175		if (!prop_dictionary_get_int64(env, "af", &af)) {
176			errno = ENOENT;
177			return -1;
180	}
commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, param=0x7f7fffffd4b0) at af_inetany.c:78
78			af = AF_INET;
80		if ((s = getsock(af)) == -1)
getsock (naf=2) at util.c:64
64		if (oaf == naf || (oaf != -1 && naf == AF_UNSPEC))
65			return s;
79	}
commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, param=0x7f7fffffd4b0) at af_inetany.c:83
83		if ((ifname = getifname(env)) == NULL)
getifname (env=0x7f7ff7b0a240) at env.c:125
125		return prop_dictionary_get_cstring_nocopy(env, "if", &s) ? s : NULL;
126	}
commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, param=0x7f7fffffd4b0) at af_inetany.c:86
86		strlcpy(param->name[0].buf, ifname, param->name[0].buflen);
87		strlcpy(param->name[1].buf, ifname, param->name[1].buflen);
89		if ((d = (prop_data_t)prop_dictionary_get(env, "address")) != NULL)
90			addr = prop_data_data_nocopy(d);
101		if ((d = (prop_data_t)prop_dictionary_get(env, "dst")) != NULL)
104			dst = NULL;
106		if ((d = (prop_data_t)prop_dictionary_get(env, "netmask")) != NULL)
109			mask = NULL;
111		if ((d = (prop_data_t)prop_dictionary_get(env, "broadcast")) != NULL)
114			brd = NULL;
116		if (!prop_dictionary_get_bool(env, "alias", &alias)) {
117			delete = false;
118			replace = (param->gifaddr.cmd != 0);
124		loadbuf(&param->addr, addr);
loadbuf (b=0x7f7fffffd4e0, pfx=0x7f7ff7b14080) at af_inetany.c:63
63		              MIN(b->buflen, pfx->pfx_addr.sa_len));
62		return memcpy(b->buf, &pfx->pfx_addr,
63		              MIN(b->buflen, pfx->pfx_addr.sa_len));
62		return memcpy(b->buf, &pfx->pfx_addr,
64	}
commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, param=0x7f7fffffd4b0) at af_inetany.c:129
129		if (getifflags(env, oenv, &flags) == -1)
getifflags (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, flagsp=0x7f7fffffd438) at env.c:87
87		if (prop_dictionary_get_uint64(env, "ifflags", &ifflags)) {
92		if ((s = getsock(AF_UNSPEC)) == -1)
getsock (naf=0) at util.c:64
64		if (oaf == naf || (oaf != -1 && naf == AF_UNSPEC))
65			return s;
79	}
getifflags (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, flagsp=0x7f7fffffd438) at env.c:95
95		if ((ifname = getifname(env)) == NULL)
getifname (env=0x7f7ff7b0a240) at env.c:125
125		return prop_dictionary_get_cstring_nocopy(env, "if", &s) ? s : NULL;
126	}
getifflags (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, flagsp=0x7f7fffffd438) at env.c:98
98		memset(&ifr, 0, sizeof(ifr));
99		estrlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
100		if (prog_ioctl(s, SIOCGIFFLAGS, &ifr) == -1)
103		*flagsp = (unsigned short)ifr.ifr_flags;
106		    (unsigned short)ifr.ifr_flags);
105		prop_dictionary_set_uint64(oenv, "ifflags",
108		return 0;
109	}
commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0, param=0x7f7fffffd4b0) at af_inetany.c:132
132		switch (flags & (IFF_BROADCAST|IFF_POINTOPOINT)) {
134			if (brd != NULL)
138			break;
150		if (param->mask.buf == NULL) {
153		} else if (mask != NULL)
155		else if (param->defmask.buf != NULL) {
159		if (replace) {
160			if (prog_ioctl(s, param->gifaddr.cmd, param->dgreq.buf) == 0) {
161				rc = prog_ioctl(s, param->difaddr.cmd, param->dgreq.buf);
162				if (rc == -1)
174		if (param->pre_aifaddr != NULL &&
177		if (prog_ioctl(s, param->aifaddr.cmd, param->req.buf) == -1)
179	}
in_commit_address (env=0x7f7ff7b0a240, oenv=0x7f7ff7b0a1d0) at af_inet.c:204
204	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:708
708		do_setifpreference(env);
do_setifpreference (env=0x7f7ff7b0a240) at ifconfig.c:1075
1075		memset(&ifap, 0, sizeof(ifap));
1077		if (!prop_dictionary_get_int16(env, "preference",
1079			return;
1090	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:709
709		do_setifcaps(env);
do_setifcaps (env=0x7f7ff7b0a240) at ifconfig.c:529
529		d = (prop_data_t )prop_dictionary_get(env, "ifcaps");
530		if (d == NULL)
531			return;
538	}
main (argc=0, argv=0x7f7fffffdc50) at ifconfig.c:711
711		exit(EXIT_SUCCESS);
[Inferior 1 (process 697) exited normally]
gdbscript:9: Error in sourced command file:
The program is not being run.
[?1034h(gdb) 